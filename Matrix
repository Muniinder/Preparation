------------------------For contributing python code---------------------construct ancestor Matrix from binary tree-----------------

n = 100
mat = []
for i in range(0,n):
    l1= []
    for j in range(0,n):
        l1.append(0)
    mat.append(l1)
class node:
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right = None
def construct_ancestor_matrix(root):
    l1 = []
    n = ancestor_mat(root,l1)
    for i in range(0,n):
        for j in range(0,n):
            print(mat[i][j],end=" ")
        print("\n",end="")
def ancestor_mat(root,l1):
    if root is None:
        return 0
    data = root.data
    for i in range(0,len(l1)):
        mat[l1[i]][data] = 1
    l1.append(data)
    l = ancestor_mat(root.left,l1)
    r = ancestor_mat(root.right,l1)
    l1.pop()
    return (l+r+1)
t1 = node(5)
t1.left = node(1)
t1.right = node(2)
t1.left.left = node(0)
t1.left.right = node(4)
t1.right.right = node(3)

construct_ancestor_matrix(t1)

-------------------------------------------construct m*n matrix with O and X ----------------------------------------
def intialise_mat(m,n):
    mat = []
    for i in range(0,m):
        l1 = []
        for j in range(0,n):
            l1.append(1)
        mat.append(l1)
    return mat
def print_mat(mat,m,n):
    for i in range(0,m):
        l1 = []
        for j in range(0,n):
            print(mat[i][j],end=" ")
        print("\n",end="")
def change_char(ch):
    if ch == 'X':
        return 'O'
    return 'X'
def spiral_traversal_fill(mat,m,n):
    ch = 'X'
    left,right =  0,n-1
    top,bottom = 0,m-1
    while left <= right and top <= bottom:
        for i in range(left,right+1):
            mat[top][i] = ch
        top += 1
        for i in range(top,bottom+1):
            mat[i][right] = ch
        right -= 1
        for i in range(right,left-1,-1):
            mat[bottom][i] = ch
        bottom -= 1
        for i in range(bottom,top-1,-1):
            mat[i][left] = ch
        left += 1
        
        ch = change_char(ch)
    return mat
def make_a_matrx(m,n):
    mat = intialise_mat(m,n)
    mat = spiral_traversal_fill(mat,m,n)
    print_mat(mat,m,n)
m,n = 15,15
make_a_matrx(m,n)

----longest consecutive path from a given starting character---(we can use dp here for results which has been calculated before)---------------

mat=[['a','c','d'],  
     ['h','b','a'],  
     ['i','g','f']]
m = len(mat)
n = len(mat[0])
class Source:
    def __init__(self,row=0,col=0,count=0):
        self.row = row
        self.col = col
        self.count = count
def is_valid(i,j):
    if i >= 0 and i <n and j >=0 and j <n:
        return True
    return False
def find_coordinates(mat,st_pt):
    for i in range(0,m):
        for j in range(0,n):
            if mat[i][j] == st_pt:
                return i,j
    return None,None
def is_greater(mat,prev,curr):
    if ord(curr) - ord(prev) == 1:
        return True
    return False
def find_longest(mat,st_pt):
    q = []
    i,j = find_coordinates(mat,st_pt)
    if i == None or j == None:
        return 0
    pos = Source(i,j,0)
    q.append(pos)
    max_val = -1
    while q :
        data = q.pop(0)
        prev = mat[data.row][data.col]
        if data.row == 0 or data.row == m-1 and data.col == 0 or data.col == n-1:
            max_val = max(max_val,data.count)
        if is_valid(data.row+1,data.col) and is_greater(mat,prev,mat[data.row+1][data.col]):
            q.append(Source(data.row+1,data.col,data.count+1))
        if is_valid(data.row,data.col+1) and is_greater(mat,prev,mat[data.row][data.col+1]):
            q.append(Source(data.row,data.col+1,data.count+1))
        if is_valid(data.row-1,data.col) and is_greater(mat,prev,mat[data.row-1][data.col]):
            q.append(Source(data.row-1,data.col,data.count+1))
        if is_valid(data.row,data.col-1) and is_greater(mat,prev,mat[data.row][data.col-1]):
            q.append(Source(data.row,data.col-1,data.count+1))
        if is_valid(data.row+1,data.col+1) and is_greater(mat,prev,mat[data.row+1][data.col+1]):
            q.append(Source(data.row+1,data.col+1,data.count+1))
        if is_valid(data.row-1,data.col-1) and is_greater(mat,prev,mat[data.row-1][data.col-1]):
            q.append(Source(data.row-1,data.col-1,data.count+1))
        if is_valid(data.row+1,data.col-1) and is_greater(mat,prev,mat[data.row+1][data.col-1]):
            q.append(Source(data.row+1,data.col-1,data.count+1))
        if is_valid(data.row-1,data.col+1) and is_greater(mat,prev,mat[data.row-1][data.col+1]):
            q.append(Source(data.row-1,data.col+1,data.count+1))
    return max_val + 1
print(find_longest(mat,'a'))
print(find_longest(mat,'e'))
print(find_longest(mat,'b'))
print(find_longest(mat,'f'))

