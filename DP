----------------longest common Subsequence---------------------------
def LCS(X,Y,n1,n2):         # recursion
    if n1==0 or n2 == 0:
        return 0
    if X[n1-1] == Y[n2-1]:
        return 1 + LCS(X,Y,n1-1,n2-1)
    else:
        return max(LCS(X,Y,n1-1,n2),LCS(X,Y,n1,n2-1))
def LCS_DP(X,Y,n1,n2):        # dp
    T = []
    for i in range(0,n1+1):
        l1 = []
        for j in range(0,n2+1):
            l1.append(0)
        T.append(l1)
    for i in range(1,n1+1):
        for j in range(1,n2+1):
            if X[i-1] == Y[j-1]:
                T[i][j] = T[i][j-1] + 1
            else:
                T[i][j] = max(T[i-1][j],T[i][j-1])
    return T[n1][n2]
X = "ABCDGH"
Y = "AEDFHR"
n1 = len(X)
n2 = len(Y)
l1 = LCS_DP(X,Y,n1,n2)
print(l1)
----------------------Edit Distance-----------------------------
class source:
    def __init__(self,row=0,col=0,dist=0):
        self.row = row
        self.col = col
        self.dist = dist
def max_sum_path(mat,n):
    row = 0
    col = 0
    q = []
    sums = 0
    q.append(source(0,0,mat[0][0] + sums))
    q.append(source(0,0,mat[0][1] + sums))
    max_value = 0
    while q:
        data = q.pop(0)
        if data.row == n-1:
            max_val = max(max_value,data.dist)
        if data.row+1 < n:
            q.append(source(data.row+1,data.col,(mat[data.row+1][data.col] + data.dist)))
        if data.row+1 < n and data.col-1 < n and data.col-1 >= 0 :
            q.append(source(data.row+1,data.col-1,(mat[data.row+1][data.col-1]+ data.dist)))
        if data.row+1 < n and data.col+1 < n:
            q.append(source(data.row+1,data.col+1,(mat[data.row+1][data.col+1]+ data.dist)))
    return max_val
n = 2
mat = [[348,391],[618,193]]
print(max_sum_path(mat,n))

----------------------------------minimum jumps ---------------------------------------
There are 3 possible solutions:
1. DP solution--------o(n^2)
2. O(n) solution    
3. BFS Solution
4. my sol-----worst_case(O(n^2))
my sol : 
def find_min_jumps(arr,n):
    i=0
    count = 0
    while (i<n):
        if arr[i]==0:
            return -1
        if arr[i]==1:
            count+=1
            i+=1
        else:
            if (i+arr[i])<n-1:
                max_val = -2456454551
                for j in range(i+1 , i+arr[i]):
                    if j+arr[j] >= n-1:
                        return count+2
                    if arr[j] <= arr[j+1]:
                        if arr[j+1]>=max_val:
                            max_val = arr[j+1]
                            ind = j+1
                    else:
                        if arr[j]>=max_val:
                            max_val = arr[j]
                            ind = j
                i = ind
                count += 1
            else:
                return count+1
    return count
    
test = int(input())
for _ in range(test):
    n = int(input())
    arr = list(map(int,input().split()))
    print(find_min_jumps(arr,n))
    
    
